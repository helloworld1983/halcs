model {
    components {
        acq(NativeExecutableSpec)
        acq_prop(NativeExecutableSpec)
        acq_sp(NativeExecutableSpec)
        acq_gen_sw_trigger(NativeExecutableSpec)
        acq_trigger(NativeExecutableSpec)
        ad9510_ctl(NativeExecutableSpec)
        adc_data(NativeExecutableSpec)
        adc_dly(NativeExecutableSpec)
        adc250_dly(NativeExecutableSpec)
        dsp_swap(NativeExecutableSpec)
        fmc130m_4ch_ctl(NativeExecutableSpec)
        fmc130m_eeprom_ctl(NativeExecutableSpec)
        fmc250m_4ch_sleep(NativeExecutableSpec)
        fmc250m_4ch_test_mode(NativeExecutableSpec)
        fmc100m_4ch_ctl(NativeExecutableSpec)
        fmc_active_clk_ad9510_ctl(NativeExecutableSpec)
        fpga_info(NativeExecutableSpec)
        leds(NativeExecutableSpec)
        monit_amp(NativeExecutableSpec)
        monit_pos(NativeExecutableSpec)
        rffe_ctl(NativeExecutableSpec)
        si571_ctl(NativeExecutableSpec)
        test_data_en(NativeExecutableSpec)
        timing(NativeExecutableSpec)
        trigger(NativeExecutableSpec)
        tim_rcv(NativeExecutableSpec)

        all {
            sources {
                c {
                    lib project: ':core:common', library: 'common'
                    lib project: ':core:sm_io', library: 'sm_io', linkage: 'api'
                    lib project: ':core:sm_io_table', library: 'sm_io_table'
                    lib project: ':libs:acqclient', library: 'acqclient'
                    lib project: ':libs:bpmclient', library: 'bpmclient'
                    lib project: ':libs:convc', library: 'convc'
                    lib project: ':libs:disptable', library: 'disptable'
                    lib project: ':libs:errhand', library: 'errhand'
                    lib project: ':libs:halcsclient', library: 'halcsclient'
                    lib project: ':libs:hutils', library: 'hutils'
                }
            }

            binaries.all {
                cCompiler.args '-Wno-missing-field-initializers',
                    '-Wno-missing-braces'

                if (toolChain in Gcc) {
                    cCompiler.args '-Wno-cpp'
                } else if (toolChain in Clang) {
                    cCompiler.args '-Wno-error=#warnings'
                }

                linker.args '-lczmq', '-lmlm'
            }
        }
    }
}
